@page "/forms"
@attribute [Authorize]
@using Sample.Utils;
@using Sample.ViewModels
@using Sample.Services
@inject FormService FormService
@inject NavigationManager NavManager
@inject Microsoft.JSInterop.IJSRuntime JS
<PageTitle>Form List</PageTitle>

<h1>Health Risk Assessment Form List</h1>



@if (listForm == null)

{
  <p><em>Loading...</em></p>
}

else

{
  <div class="col button-top">
    <a href="" onclick="@CreateNewForm" class="btn btn-success float-end">+ Create New</a>
  </div>
  <table class="table">
    <thead>
      <tr>
        <th>Created Date</th>
        <th>Last Edited</th>
        <th>Created By</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var form in listForm)

      {
        <tr >
          <td @onclick="(()=>OnClickRowForm(form.Id))">@form.CreatedAt.ToString("MM/dd/yyyy HH:mm:ss")</td>
          <td @onclick="(()=>OnClickRowForm(form.Id))">@form.LastEdited.ToString("MM/dd/yyyy HH:mm:ss")</td>
          <td @onclick="(()=>OnClickRowForm(form.Id))">@form.CreatedBy</td>
          <td @onclick="(()=>OnClickRowForm(form.Id))">@RenderStatus(form.FormStatus.ToString())</td>
          <td>
            <a href="javascript:void(0);" @onclick="()=>DeleteForm(form.Id)" data-toggle="tooltip" title="Delete this form">
                <i class="fas fa-trash-alt"></i>
            </a>
            <a href="javascript:void(0);" @onclick="()=>ExportForm(form.Id)" style="margin-left: 12px;" data-toggle="tooltip" title="Report this form">
                <i class="fas fa-file-export"></i>
            </a>
          </td>

        </tr>
      }
    </tbody>
  </table>
  <div class="modal" tabindex="-1" role="dialog" style="display: @(showDeleteConfirmation ? "block" : "none")">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseDeleteConfirmation">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this form?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDeleteConfirmation">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

}

@code {
    private List<FormViewModel>? listForm;
    private bool showDeleteConfirmation = false;
    private string formIdToDelete;

    protected override async Task OnInitializedAsync()

    {

        listForm = await FormService.GetListForm();

    }

    private async Task CreateNewForm()
    {
        var form = await FormService.CreateForm(new ViewModels.FormViewModel() { Title = "Health Risk Assessment"});
        NavManager.NavigateTo($"/formcreate/{form.Id}");
    }
    private void OnClickRowForm(string formId)
    {
        NavManager.NavigateTo($"/formcreate/{formId}");
    }

    private async Task ExportForm (string formId)
    {
        using var stream = new MemoryStream();
        await FormService.ExportAsync(formId, stream);
        await JS.SaveAs("Form.pdf", stream.ToArray());
    }

    private void DeleteForm(string FormId)
    {
        formIdToDelete = FormId;
        showDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmation()
    {
        showDeleteConfirmation = false;
    }

    private async void ConfirmDelete()
    {
        await FormService.DeleteForm(formIdToDelete);
        listForm = await FormService.GetListForm();
        showDeleteConfirmation = false;
    }
    private string RenderStatus(string FormStatus)
    {
        string rs = FormStatus;
        switch (FormStatus)
        {
            case "FillOut":
                rs = "Filled Out";
                break;
            default:
                break;
        };
        return rs;
    }
}
