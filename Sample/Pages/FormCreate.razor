@page "/formcreate/{FormId}"
@using Sample.Entities.Models
@using Sample.Services
@using Sample.ViewModels
@using Blazored.Toast
@using Blazored.Toast.Services
@using Blazored.Toast.Configuration
@inject FormService FormService
@inject ResponseService ResponseService
@inject IToastService toastService


<div class="container">
    <a href="/forms" class="back-button ">
        <i class="fas fa-arrow-left"></i> Back
    </a>
    <PageTitle>Health Risk Assessment</PageTitle>

    <h1>Health Risk Assessment</h1>

    @if (Form == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var cate = new QuestionCategory();
        <EditForm Model="Form" OnValidSubmit="@OnSubmit" class="form">
            @foreach (var question in Form.Questions.OrderBy(e => e.Order))
            {
                    @if (question.QuestionCategory != cate.Category || question.QuestionCategoryDescription != cate.CategoryDescription)
                    {
                        cate.Category = question?.QuestionCategory;
                        cate.CategoryDescription = question?.QuestionCategoryDescription;
                        @if (cate.Category != null && cate.Category != "")
                        {
                          <div class="font-italic">
                              <h5 style="display: inline-block; margin-top: 12px; margin-bottom: 0;">@cate.Category</h5>
                              @if (cate.CategoryDescription != null && cate.CategoryDescription != "")
                              {
                                  <span style="margin-left: 4px">(@cate.CategoryDescription)</span>
                              }
                          </div>
                        }
                    }
                <div class="form-group mb-2 mt-2">
                    <div class="question" style="margin-right: 40%;">
                        <b>@question.QuestionText</b>
                        @if (question.QuestionType == QuestionType.SingleOpen || question.QuestionType == QuestionType.Single)
                        {
                            <div class="row mt-1 ms-1" >
                                @foreach (var answer in question.Answers.OrderBy(e => e.Order))
                                {
                                    <div class="form-check col-6">
                                        <input type="radio"
                                        value="@answer.Id"
                                        @onchange="@(e => HandleChange(question, answer, e))" checked="@answer.IsSelected"
                                        name="@question.Id"
                                        id="@answer.Id"
                                        class="form-check-input" />
                                        <label for="@answer.Id" class="form-check-label">@answer.Answer</label>
                                        @if (answer.ExtraAnswer)
                                        {
                                            <InputText  id="@answer.Id" @bind-Value="answer.ExtraAnswerText" class="form-control" />
                                        }

                                    </div>
                                }
                            </div>
                        }
                        else if (question.QuestionType == QuestionType.MultipleOpen || question.QuestionType == QuestionType.Multiple)
                        {
                            <div class="row mt-1 ms-1">
                                @foreach (var answer in question.Answers.OrderBy(e => e.Order))
                                {
                                    <div class="form-check col-6 pl-9">
                                        <input
                                        @bind="answer.IsSelected"
                                        type="checkbox" id="@answer.Id" name="question-@question.Id" class="form-check-input" />
                                        <label for="@answer.Id" class="form-check-label">@answer.Answer</label>
                                    </div>
                                }
                            </div>
                        }
                        else if (question.QuestionType == QuestionType.Info)
                        {
                            <div class="row mt-1">
                                @foreach (var answer in question.Answers.OrderBy(e => e.Order))
                                {
                                    @if (question.QuestionDataType == QuestionDataType.Boolean)
                                    {
                                        <div class="form-check col-6" style="padding-left: 41px;">
                                             <input
                                              name="@question.Id"
                                              value="@answer.Id"
                                              @onchange="@(e => HandleChange(question, answer, e))" checked="@answer.IsSelected"
                                              type="radio" id="@answer.Id"  class="form-check-input" />
                                            <label for="@answer.Id">@answer.Answer</label>
                                        </div>

                                    }
                                    else if (question.QuestionDataType == QuestionDataType.Date)
                                    {
                                        <div class="form-group col-6">
                                            <Input type="date" id="@answer.Id" value="@answer.Answer"
                                             @onchange="@(e => DOBChanged(question, answer, e))"
                                             class="form-control" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-group col-6">
                                            <InputText  id="@answer.Id" @bind-Value="answer.Answer" class="form-control" />
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            }
            <div class="mt-4">
              <button type="submit" class="btn btn-primary">@(Version == 0 ? "Submit" : "Save")</button>
              <button type="submit" class="btn btn-primary">Export Report</button>
            </div>
        </EditForm>
        <BlazoredToasts
          Position="@ToastPosition.BottomRight"
          Timeout="2"
        />
    }
</div>



@code {
    [Parameter]
    public string FormId { set; get; }
    private FormEntity? Form;
    public int Version { get; set; }
    private ResponseEntity? Response;
    private List<ResponseDetailEntity> ResponseDetails;
    private List<string> selectedAnswers = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        Form = await FormService.GetFormDetail(FormId);
        Response = await ResponseService.GetResponseByFormId(FormId);
        var allAnswer = Form.Questions.SelectMany(e=>e.Answers);
        if (Response != null){
          Version = Response.Version;
          var allAnswerResponse = Response.ResponseDetail;
          foreach (var ans in allAnswer){
            foreach( var ansRes in allAnswerResponse){
              if (ans.Id == ansRes.Answer.Id){
                ans.Answer = ansRes.Answer.Answer;
                ans.ExtraAnswer = ansRes.Answer.ExtraAnswer;
                ans.ExtraAnswerText = ansRes.ExtraAnswer;
                ans.IsSelected = true;
              }
            }
          }

        }
    }

    protected void OnReport(){

    }
    protected void OnSaveForm(){

    }
    protected void OnSubmitForm(){

    }
    protected async Task OnSubmit(){
      var allQuestion = Form!.Questions?.ToList();
      var textDateAnswer = allQuestion.Where(e=>e.QuestionType == QuestionType.Info || e.QuestionType == QuestionType.Open).SelectMany(q=>q.Answers).Where(a=>a.ExtraAnswer).Select(e=> new ResponseDetailEntity(){
        ExtraAnswer = e.Answer,
        Answer = e,
        Response = null,
        ResponseId = null
      }).ToList();
      var selectionAnswer = allQuestion.SelectMany(q=>q.Answers).Where(e=>e.IsSelected && !e.ExtraAnswer).Select(e=> new ResponseDetailEntity(){
        Answer = e,
        Response = null,
        ResponseId = null
      }).ToList();
      var selectionOtherAnswer = allQuestion.Where(e=>e.QuestionType == QuestionType.MultipleOpen || e.QuestionType == QuestionType.SingleOpen).SelectMany(q=>q.Answers).Where(e=>e.IsSelected && e.ExtraAnswer).Select(e=> new ResponseDetailEntity(){
        ExtraAnswer = e.ExtraAnswerText,
        Answer = e,
        Response = null,
        ResponseId = null
      }).ToList();


      Response = new ResponseEntity();
      Response.Id = null;
      Response.Version = Version+1;
      Response.ResponseDetail = textDateAnswer.Concat(selectionAnswer).Concat(selectionOtherAnswer).ToList();
      Response.Form = Form;
      Response.IsSubmitted = true;
      await ResponseService.CreateResponse(Response);
      toastService.ShowSuccess("Save form successfully");

    }
    private void HandleChange(QuestionEntity question, AnswerEntity answer, ChangeEventArgs e)
    {
      if (question.QuestionType == QuestionType.Single || question.QuestionType == QuestionType.SingleOpen || question.QuestionDataType == QuestionDataType.Boolean){
        foreach(var ans in question.Answers){
          ans.IsSelected = false;
        }
      }
      answer.IsSelected = true;
    }
    private void DOBChanged(QuestionEntity question, AnswerEntity answer, ChangeEventArgs e)
    {
        answer.Answer = e.Value.ToString();
    }
}
